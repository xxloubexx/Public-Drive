<!DOCTYPE html>
<html lang="fr">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Drive Public</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>

<body>
  <div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1>Liste des dossiers et fichiers</h1>
      <a href="<%= adminPath %>" class="btn btn-primary">Modification</a>
    </div>

    <!-- Formulaire de recherche en temps r√©el -->
    <div class="mb-4">
      <input type="text" id="searchQuery" class="form-control mb-2" placeholder="Rechercher un fichier"
        autocomplete="off">
      <div class="form-check form-check-inline">
        <input class="form-check-input" type="radio" name="searchType" id="searchFilename" value="filename" checked>
        <label class="form-check-label" for="searchFilename">Recherche par nom de fichier</label>
      </div>
      <div class="form-check form-check-inline">
        <input class="form-check-input" type="radio" name="searchType" id="searchContent" value="content">
        <label class="form-check-label" for="searchContent">Recherche dans le contenu</label>
      </div>
    </div>

    <!-- Contenu des r√©sultats de recherche -->
    <div id="searchResults"></div>

    <!-- Liste par d√©faut des dossiers et fichiers -->
    <div id="defaultList" class="list-group">
      <% directories.forEach(function(directory) { %>
        <a href="/folder/<%= directory %>" class="list-group-item list-group-item-action">
          üìÅ <%= directory %>
        </a>
      <% }); %>
      <% fileList.forEach(function(file) { %>
        <a href="/file/<%= file %>" class="list-group-item list-group-item-action">
          üìÑ <%= file %>
        </a>
      <% }); %>
    </div>
  </div>

  <script>
    let searchTimeout;

    function debounce(func, wait) {
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(searchTimeout);
          func(...args);
        };
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(later, wait);
      };
    }

    async function performSearch() {
      const query = document.getElementById('searchQuery').value;
      const searchType = document.querySelector('input[name="searchType"]:checked').value;
      const resultsContainer = document.getElementById('searchResults');
      const defaultList = document.getElementById('defaultList');

      if (!query) {
        resultsContainer.innerHTML = '';
        defaultList.style.display = 'block';
        return;
      }

      defaultList.style.display = 'none';
      resultsContainer.innerHTML = '<p>Recherche en cours...</p>';

      try {
        const response = await fetch(`/api/search?query=${encodeURIComponent(query)}&searchType=${searchType}`);
        const results = await response.json();

        let html = '';

        if (results.files.length > 0) {
          html += '<h3>Fichiers trouv√©s</h3><ul class="list-group">';
          results.files.forEach(file => {
            html += `<li class="list-group-item"><a href="/file/${file}">üìÑ ${file}</a></li>`;
          });
          html += '</ul>';
        } else {
          html = '<p>Aucun fichier trouv√©</p>';
        }

        resultsContainer.innerHTML = html;
      } catch (error) {
        console.error('Erreur lors de la recherche:', error);
        resultsContainer.innerHTML = '<p>Erreur lors de la recherche</p>';
      }
    }

    const debouncedSearch = debounce(performSearch, 300);

    document.getElementById('searchQuery').addEventListener('input', debouncedSearch);
    document.querySelectorAll('input[name="searchType"]').forEach(radio => {
      radio.addEventListener('change', performSearch);
    });
  </script>
</body>

</html>